# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gen_events

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ImageScoredEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageScoredEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsImageScoredEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ImageScoredEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageScoredEvent
    def EventCreateTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ImageScoredEvent
    def ImageUuid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ImageScoredEvent
    def ImageFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ImageScoredEvent
    def Scores(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from gen_events.ImageLabelScore import ImageLabelScore
            obj = ImageLabelScore()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ImageScoredEvent
    def ScoresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ImageScoredEvent
    def ScoresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def ImageScoredEventStart(builder): builder.StartObject(4)
def Start(builder):
    return ImageScoredEventStart(builder)
def ImageScoredEventAddEventCreateTs(builder, eventCreateTs): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventCreateTs), 0)
def AddEventCreateTs(builder, eventCreateTs):
    return ImageScoredEventAddEventCreateTs(builder, eventCreateTs)
def ImageScoredEventAddImageUuid(builder, imageUuid): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(imageUuid), 0)
def AddImageUuid(builder, imageUuid):
    return ImageScoredEventAddImageUuid(builder, imageUuid)
def ImageScoredEventAddImageFormat(builder, imageFormat): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(imageFormat), 0)
def AddImageFormat(builder, imageFormat):
    return ImageScoredEventAddImageFormat(builder, imageFormat)
def ImageScoredEventAddScores(builder, scores): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scores), 0)
def AddScores(builder, scores):
    return ImageScoredEventAddScores(builder, scores)
def ImageScoredEventStartScoresVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartScoresVector(builder, numElems):
    return ImageScoredEventStartScoresVector(builder, numElems)
def ImageScoredEventEnd(builder): return builder.EndObject()
def End(builder):
    return ImageScoredEventEnd(builder)